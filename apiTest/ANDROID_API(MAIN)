package com.example.prac;
import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.os.NetworkOnMainThreadException;
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import android.view.View;
import android.widget.EditText;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

public class MainActivity extends AppCompatActivity {

    long mNow;
    Date mDate;
    SimpleDateFormat mFormat = new SimpleDateFormat("yyyyMMdd");
    final int CONN_TIME = 5000;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        TextView dateText = (TextView) findViewById(R.id.dateText);
        TextView daily_confirmed_API = (TextView) findViewById(R.id.daily_confirmed_API);
        TextView Accumulated_confirmed_API = (TextView) findViewById(R.id.Accumulated_confirmed_API);
        TextView daily_dead_API = (TextView) findViewById(R.id.daily_dead_API);
        TextView Accumulated_dead_API = (TextView) findViewById(R.id.Accumulated_dead_API);
        TextView daily_exam_API = (TextView) findViewById(R.id.daily_exam_API);
        TextView Accumulated_exam_API = (TextView) findViewById(R.id.Accumulated_exam_API);
        TextView daily_first_complete_API = (TextView) findViewById(R.id.daily_first_complete_API);
        TextView Accumulated_first_complete_API = (TextView) findViewById(R.id.Accumulated_first_complete_API);
        TextView daily_second_complete_API = (TextView) findViewById(R.id.daily_second_complete_API);
        TextView Accumulated_second_complete_API = (TextView) findViewById(R.id.Accumulated_second_complete_API);
        TextView daily_third_complete_API = (TextView) findViewById(R.id.daily_third_complete_API);
        TextView Accumulated_third_complete_API = (TextView) findViewById(R.id.Accumulated_third_complete_API);

        Button b1 = (Button) findViewById(R.id.button);


        b1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    new Thread() {
                        public void run() {
                            try {
                                String coronadata = getHTML(); //데이터 불러오기
                                String coronadata2= getHTML1();
                                String vaccine_api= Vaccine_api();

/*
                                //날짜
                                int createStart = data.indexOf("<createDt>");
                                int createEnd = data.indexOf("</createDt>");
                                String createDt = data.substring(createStart,createEnd);
                                String createDtString = createDt.replace("<createDt>", "기준 날짜 = ");
                                dateText.setText(createDtString);*/

                                int Accumulated_confirmedStart=coronadata.indexOf("<decideCnt>");
                                int Accumulated_confirmedEnd=coronadata.indexOf("</decideCnt>");
                                String Accumulated_confirmedCnt=coronadata.substring(Accumulated_confirmedStart,Accumulated_confirmedEnd);
                                String Accumulated_confirmedCnt1=Accumulated_confirmedCnt.replace("<decideCnt>","누적 확진자 수 = ");
                                Accumulated_confirmed_API.setText(Accumulated_confirmedCnt1);


                                int daily_confirmedStart=coronadata2.indexOf("<decideCnt>");
                                int daily_confirmedEnd=coronadata2.indexOf("</decideCnt>");
                                String daily_confirmedCnt=coronadata2.substring(daily_confirmedStart,daily_confirmedEnd);
                                String daily_confirmed_Cnt=daily_confirmedCnt.replace("<decideCnt>","");
                                String Accumulated_confirm_Cnt=Accumulated_confirmedCnt.replace("<decideCnt>","");
                                try{
                                    int daily_confirmed_cnt=Integer.parseInt(daily_confirmed_Cnt);
                                    int accumulated_confirmed_cnt=Integer.parseInt(Accumulated_confirm_Cnt);
                                    int daily_confirmed_cnt1=accumulated_confirmed_cnt-daily_confirmed_cnt;
                                    String daily_confirmedCnt1=Integer.toString(daily_confirmed_cnt1);
                                    daily_confirmed_API.setText("일일 확진자 수 = "+daily_confirmedCnt1);

                                }catch(Exception e){
                                    e.printStackTrace();
                                }

                                int Accumulated_deathStart=coronadata.indexOf("<deathCnt>");
                                int Accumulated_deathEnd=coronadata.indexOf("</deathCnt>");
                                String Accumulated_deathCnt=coronadata.substring(Accumulated_deathStart,Accumulated_deathEnd);
                                String Accumulated_deathCnt1=Accumulated_deathCnt.replace("<deathCnt>","누적 사망자 수 = ");
                                Accumulated_dead_API.setText(Accumulated_deathCnt1);


                                int daily_deathStart=coronadata2.indexOf("<deathCnt>");
                                int daily_deathEnd=coronadata2.indexOf("</deathCnt>");
                                String daily_deathCnt=coronadata2.substring(daily_deathStart,daily_deathEnd);
                                String daily_death_Cnt=daily_deathCnt.replace("<deathCnt>","");
                                String Accumulated_death_Cnt=Accumulated_deathCnt.replace("<deathCnt>","");
                                try{
                                    int daily_death_cnt=Integer.parseInt(daily_death_Cnt);
                                    int accumulated_death_cnt=Integer.parseInt(Accumulated_death_Cnt);
                                    int daily_death_cnt1=accumulated_death_cnt-daily_death_cnt;
                                    String daily_deathCnt1=Integer.toString(daily_death_cnt1);
                                    daily_dead_API.setText("일일 사망자 수 = "+daily_deathCnt1);

                                }catch(Exception e){
                                    e.printStackTrace();
                                }


                                int Accumulated_examStart=coronadata.indexOf("<accExamCnt>");
                                int Accumulated_examEnd=coronadata.indexOf("</accExamCnt>");
                                String Accumulated_examCnt=coronadata.substring(Accumulated_examStart,Accumulated_examEnd);
                                String Accumulated_examCnt1=Accumulated_examCnt.replace("<accExamCnt>","누적 검사자 수 = ");
                                Accumulated_exam_API.setText(Accumulated_examCnt1);


                                int daily_examStart=coronadata2.indexOf("<accExamCnt>");
                                int daily_examEnd=coronadata2.indexOf("</accExamCnt>");
                                String daily_examCnt=coronadata2.substring(daily_examStart,daily_examEnd);
                                String daily_exam_Cnt=daily_examCnt.replace("<accExamCnt>","");
                                String Accumulated_exam_Cnt=Accumulated_examCnt.replace("<accExamCnt>","");
                                try{
                                    int daily_exam_cnt=Integer.parseInt(daily_exam_Cnt);
                                    int accumulated_exam_cnt=Integer.parseInt(Accumulated_exam_Cnt);
                                    int daily_exam_cnt1=accumulated_exam_cnt-daily_exam_cnt;
                                    String daily_examCnt1=Integer.toString(daily_exam_cnt1);
                                    daily_exam_API.setText("일일 검사자 수 = "+daily_examCnt1);

                                }catch(Exception e){
                                    e.printStackTrace();
                                }

                                int daily_firstCntStart=vaccine_api.indexOf("<firstCnt>");
                                int daily_firstCntEnd=vaccine_api.indexOf("</firstCnt>");
                                String daily_firstCnt=vaccine_api.substring(daily_firstCntStart,daily_firstCntEnd);
                                String daily_firstCnt1=daily_firstCnt.replace("<firstCnt>", "일일 1차 접종자 수 = ");
                                daily_first_complete_API.setText(daily_firstCnt1);

                                int daily_secondCntStart=vaccine_api.indexOf("<secondCnt>");
                                int daily_secondCntEnd=vaccine_api.indexOf("</secondCnt>");
                                String daily_secondCnt=vaccine_api.substring(daily_secondCntStart,daily_secondCntEnd);
                                String daily_secondCnt1=daily_secondCnt.replace("<secondCnt>", "일일 2차 접종자 수 = ");
                                daily_second_complete_API.setText(daily_secondCnt1);

                                int daily_thirdCntStart=vaccine_api.indexOf("<thirdCnt>");
                                int daily_thirdCntEnd=vaccine_api.indexOf("</thirdCnt>");
                                String daily_thirdCnt=vaccine_api.substring(daily_thirdCntStart,daily_thirdCntEnd);
                                String daily_thirdCnt1=daily_thirdCnt.replace("<thirdCnt>", "일일 3차 접종자 수 = ");
                                daily_third_complete_API.setText(daily_thirdCnt1);

                                int rev=vaccine_api.indexOf("(A)+(B)");
                                StringBuffer sb=new StringBuffer();
                                sb.append(vaccine_api);
                                String rev_vaccine_api=sb.delete(0, rev).toString();
                                int accumulated_firstCntStart=rev_vaccine_api.indexOf("<firstCnt>");
                                int accumulated_firstCntEnd=rev_vaccine_api.indexOf("</firstCnt>");
                                String accumulated_firstCnt=rev_vaccine_api.substring(accumulated_firstCntStart,accumulated_firstCntEnd);
                                String accumulated_firstCnt1=accumulated_firstCnt.replace("<firstCnt>", "누적 1차 접종자 수 = ");
                                Accumulated_first_complete_API.setText(accumulated_firstCnt1);

                                int accumulated_secondCntStart=rev_vaccine_api.indexOf("<secondCnt>");
                                int accumulated_secondCntEnd=rev_vaccine_api.indexOf("</secondCnt>");
                                String accumulated_secondCnt=rev_vaccine_api.substring(accumulated_secondCntStart,accumulated_secondCntEnd);
                                String accumulated_secondCnt1=accumulated_secondCnt.replace("<secondCnt>", "누적 2차 접종자 수 = ");
                                Accumulated_second_complete_API.setText(accumulated_secondCnt1);


                                int accumulated_thirdCntStart=rev_vaccine_api.indexOf("<thirdCnt>");
                                int accumulated_thirdCntEnd=rev_vaccine_api.indexOf("</thirdCnt>");
                                String accumulated_thirdCnt=rev_vaccine_api.substring(accumulated_thirdCntStart,accumulated_thirdCntEnd);
                                String accumulated_thirdCnt1=accumulated_thirdCnt.replace("<thirdCnt>", "누적 3차 접종자 수 = ");
                                Accumulated_third_complete_API.setText(accumulated_thirdCnt1);


                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                    }.start();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private String getTime() {
        mNow = System.currentTimeMillis();
        mDate = new Date(mNow);
        return mFormat.format(mDate);
    }

    private String getHTML() {
        String coronaHtml = "";
        HttpURLConnection con = null;
        InputStreamReader isr = null;
        BufferedReader br = null;

        try{
            StringBuilder urlBuilder = new StringBuilder("http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson"); /*URL*/
            urlBuilder.append("?" + URLEncoder.encode("serviceKey","UTF-8") + "=BGYZ3GEcNWvV9fWuAwFKo9dMtPwYVng3hWqlYLq9dHcHp5DGZAXeoBQJhD5nRR%2B0XZW8EqPjwkxzm5ph6ZIwqA%3D%3D"); /*Service Key*/
            urlBuilder.append("&" + URLEncoder.encode("ServiceKey","UTF-8") + "=" + URLEncoder.encode("BGYZ3GEcNWvV9fWuAwFKo9dMtPwYVng3hWqlYLq9dHcHp5DGZAXeoBQJhD5nRR+0XZW8EqPjwkxzm5ph6ZIwqA==", "UTF-8")); /*공공데이터포털에서 받은 인증키*/
            urlBuilder.append("&" + URLEncoder.encode("pageNo","UTF-8") + "=" + URLEncoder.encode("1", "UTF-8")); /*페이지번호*/
            urlBuilder.append("&" + URLEncoder.encode("numOfRows","UTF-8") + "=" + URLEncoder.encode("10", "UTF-8")); /*한 페이지 결과 수*/
            urlBuilder.append("&" + URLEncoder.encode("startCreateDt","UTF-8") + "=" + URLEncoder.encode(getTime(), "UTF-8")); /*검색할 생성일 범위의 시작*/
            urlBuilder.append("&" + URLEncoder.encode("endCreateDt","UTF-8") + "=" + URLEncoder.encode(getTime(), "UTF-8")); /*검색할 생성일 범위의 종료*/
            URL url = new URL(urlBuilder.toString());
            con = (HttpURLConnection) url.openConnection();
            con.setConnectTimeout(CONN_TIME);
            con.setReadTimeout(CONN_TIME);

            isr = new InputStreamReader(con.getInputStream());
            br = new BufferedReader(isr);

            String str = null;
            while ((str = br.readLine()) != null) {
                coronaHtml += str + "\n";
            }

        }catch(Exception e){
            e.printStackTrace();
        }finally{
            if(con != null){
                try{con.disconnect();}catch(Exception e){}
            }

            if(isr != null){
                try{isr.close();}catch(Exception e){}
            }

            if(br != null){
                try{br.close();}catch(Exception e){}
            }
        }
        return coronaHtml;
    }

    private String getHTML1() {
        String coronaHtml = "";
        HttpURLConnection con = null;
        InputStreamReader isr = null;
        BufferedReader br = null;
        int time=Integer.parseInt(getTime());
        String time1=Integer.toString(time-1);
        try{
            StringBuilder urlBuilder = new StringBuilder("http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson"); /*URL*/
            urlBuilder.append("?" + URLEncoder.encode("serviceKey","UTF-8") + "=BGYZ3GEcNWvV9fWuAwFKo9dMtPwYVng3hWqlYLq9dHcHp5DGZAXeoBQJhD5nRR%2B0XZW8EqPjwkxzm5ph6ZIwqA%3D%3D"); /*Service Key*/
            urlBuilder.append("&" + URLEncoder.encode("ServiceKey","UTF-8") + "=" + URLEncoder.encode("BGYZ3GEcNWvV9fWuAwFKo9dMtPwYVng3hWqlYLq9dHcHp5DGZAXeoBQJhD5nRR+0XZW8EqPjwkxzm5ph6ZIwqA==", "UTF-8")); /*공공데이터포털에서 받은 인증키*/
            urlBuilder.append("&" + URLEncoder.encode("pageNo","UTF-8") + "=" + URLEncoder.encode("1", "UTF-8")); /*페이지번호*/
            urlBuilder.append("&" + URLEncoder.encode("numOfRows","UTF-8") + "=" + URLEncoder.encode("10", "UTF-8")); /*한 페이지 결과 수*/
            urlBuilder.append("&" + URLEncoder.encode("startCreateDt","UTF-8") + "=" + URLEncoder.encode(time1, "UTF-8")); /*검색할 생성일 범위의 시작*/
            urlBuilder.append("&" + URLEncoder.encode("endCreateDt","UTF-8") + "=" + URLEncoder.encode(time1, "UTF-8")); /*검색할 생성일 범위의 종료*/
            URL url = new URL(urlBuilder.toString());
            con = (HttpURLConnection) url.openConnection();
            con.setConnectTimeout(CONN_TIME);
            con.setReadTimeout(CONN_TIME);

            isr = new InputStreamReader(con.getInputStream());
            br = new BufferedReader(isr);

            String str = null;
            while ((str = br.readLine()) != null) {
                coronaHtml += str + "\n";
            }

        }catch(Exception e){
            e.printStackTrace();
        }finally{
            if(con != null){
                try{con.disconnect();}catch(Exception e){}
            }

            if(isr != null){
                try{isr.close();}catch(Exception e){}
            }

            if(br != null){
                try{br.close();}catch(Exception e){}
            }
        }
        return coronaHtml;
    }

    private String Vaccine_api() {
        String coronaHtml = "";
        HttpURLConnection con = null;
        InputStreamReader isr = null;
        BufferedReader br = null;

        try{
            StringBuilder urlBuilder = new StringBuilder("https://nip.kdca.go.kr/irgd/cov19stats.do?list=all");
            URL url = new URL(urlBuilder.toString());
            con = (HttpURLConnection) url.openConnection();
            con.setConnectTimeout(CONN_TIME);
            con.setReadTimeout(CONN_TIME);

            isr = new InputStreamReader(con.getInputStream());
            br = new BufferedReader(isr);

            String str = null;
            while ((str = br.readLine()) != null) {
                coronaHtml += str + "\n";
            }

        }catch(Exception e){
            e.printStackTrace();
        }finally{
            if(con != null){
                try{con.disconnect();}catch(Exception e){}
            }

            if(isr != null){
                try{isr.close();}catch(Exception e){}
            }

            if(br != null){
                try{br.close();}catch(Exception e){}
            }
        }
        return coronaHtml;
    }

}
